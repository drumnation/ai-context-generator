---
description: Standards for React component structure, styling, types, logic, and stories using Styled Components.
globs: *.tsx
alwaysApply: false
---
# React Component Standards & Patterns

## Component Structure & Organization

### File Organization
- Each component should have its own folder
- Structure components as follows:
  ```
  ComponentName/
  ├── index.ts                  # Barrel export
  ├── ComponentName.tsx         # Main component
  ├── ComponentName.styles.ts   # Styled components
  ├── ComponentName.types.ts    # TypeScript interfaces/types
  ├── ComponentName.hook.ts     # Stateful logic (custom hooks)
  ├── ComponentName.logic.ts    # Pure business logic
  ├── ComponentName.stories.tsx # Storybook stories
  └── sub-components/           # If needed for large components
      └── ...                   # Follow same pattern for sub-components
  ```
- Keep components under 500 lines (300 lines preferred)
- When exceeding size limits, extract to sub-components

### Component Hierarchy
- **Location structure:**
  - root: `src/shared-components`
  - atoms: `src/shared-components/atoms`
  - molecules: `src/shared-components/molecules`
  - organisms: `src/shared-components/organisms`
  - templates: `src/shared-components/templates`

### Export Standards
- Use barrel exports via index.ts
- Use named exports (not default)
- Type exports required
- Props interface naming: `{ComponentName}Props`

## Styling Standards

- **USE STYLED COMPONENTS, NOT TAILWIND CSS**
- Extract all styles to ComponentName.styles.ts
- Theme type location: src/shared-components/theme.d.ts
- Theme type: DefaultTheme
- Avoid inline styles completely

## Component Architecture

### Logic Separation
- Extract inline functions to named handlers
- Move complex business logic to dedicated `.logic.ts` files
- Implement stateful logic in `.hook.ts` custom hooks
- Use useCallback for event handlers
- Use useMemo for expensive computations
- Include all dependencies in dependency arrays

### TypeScript Best Practices
- Props interface required for all components
- Avoid type assertions (`as`) in component code
- Implement proper generic types for reusable components
- Maintain strict TypeScript configuration
- Export types through barrel files

### UI Patterns
- Use Next Image instead of HTML img
- Use camelCase for component properties
- Implement React error boundaries at appropriate levels
- Add user-friendly error states and feedback
- Ensure loading states are handled gracefully
- Ensure proper accessibility attributes

## Storybook Standards

- Stories in ComponentName.stories.tsx
- For reusable atomic components:
  - Use autodocs
  - Define every variation of the component's props as a story
- For non-reusable composed components:
  - Only use a default story
  - No autodocs required
- Align story content with the main application
- **ALWAYS** trust and use the preview.tsx for any providers
- **DO NOT** define providers in individual stories

## Component Refactoring Workflow

### 1. Analysis Phase
- Review component purpose and identify responsibilities
- Document current behavior for regression testing
- Identify code smells specific to component architecture

### 2. Extraction Strategy
- Start with types (.types.ts)
- Move styles next (.styles.ts)
- Extract business logic (.logic.ts)
- Extract stateful logic (.hook.ts)
- Simplify main component file

### 3. Error Handling Implementation
- Add appropriate error boundaries
- Implement graceful fallbacks
- Add user feedback for errors

### 4. Documentation Updates
- Update/create Storybook stories
- Document component props with JSDoc comments
- Ensure accessibility attributes and documentation

## Anti-Patterns to Avoid

- Prop drilling through multiple component levels
- Mixing UI rendering with complex business logic
- Inline styles or logic in component files
- Overly large components (>300 lines)
- Using generic HTML elements without proper semantics
- Adding Tailwind classes
- Default exports
- Type assertions (`as`)
- Missing dependency arrays in hooks
- Providers in individual stories
